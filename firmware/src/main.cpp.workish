#include <Arduino.h>
#include <Adafruit_NeoPixel.h>

#define PTT_PIN     0    // GP0
#define DISABLE_PIN 1    // GP1
#define LED_PIN    13    // Built-in LED
#define WS2812_PIN  3    // WS2812 data

#define WS2812_COUNT 1

Adafruit_NeoPixel strip(WS2812_COUNT, WS2812_PIN, NEO_GRB + NEO_KHZ800);

bool device_enabled = true;
bool ptt_state = false;

unsigned long disableButtonPressTime = 0;
const unsigned long holdDuration = 2000; // 2 seconds hold

// Colors for WS2812 status
uint32_t COLOR_MUTED = strip.Color(25, 0, 0);    // Red
uint32_t COLOR_MIC_ON = strip.Color(0, 25, 0);   // Green
uint32_t COLOR_DISABLED = strip.Color(0, 0, 0);   // Off

void updateStatusLED() {
  if (!device_enabled) {
    strip.setPixelColor(0, COLOR_DISABLED);
  } else if (ptt_state) {
    strip.setPixelColor(0, COLOR_MIC_ON);
  } else {
    strip.setPixelColor(0, COLOR_MUTED);
  }
  strip.show();
}

void sendStatusMessage(const char* msg) {
  Serial.println(msg);
  // Systemd script can parse these messages on serial to act accordingly
}

void setup() {
  pinMode(PTT_PIN, INPUT_PULLUP);
  pinMode(DISABLE_PIN, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);

  digitalWrite(LED_PIN, HIGH);  // Turn on built-in LED initially (powered)

  strip.begin();
  strip.show(); // Initialize all pixels off

  Serial.begin(115200);
  delay(500); // Allow serial to initialize

  sendStatusMessage("Device started and enabled");
  updateStatusLED();
}

void loop() {
  // Read buttons (active low)
  bool ptt_pressed = digitalRead(PTT_PIN) == LOW;
  bool disable_pressed = digitalRead(DISABLE_PIN) == LOW;

  // Handle PTT button state change
  if (ptt_pressed != ptt_state) {
    ptt_state = ptt_pressed;
    if (ptt_state) {
      sendStatusMessage("PTT pressed");
    } else {
      sendStatusMessage("PTT released");
    }
    updateStatusLED();
  }

  // Handle disable button press and hold toggle
  if (disable_pressed) {
    if (disableButtonPressTime == 0) {
      disableButtonPressTime = millis();
    } else if (millis() - disableButtonPressTime >= holdDuration) {
      device_enabled = !device_enabled;
      if (device_enabled) {
        sendStatusMessage("Device enabled");
        digitalWrite(LED_PIN, HIGH);
      } else {
        sendStatusMessage("Device disabled");
        digitalWrite(LED_PIN, LOW);
      }
      updateStatusLED();
      // Debounce the toggle so it only triggers once per press
      while (digitalRead(DISABLE_PIN) == LOW) {
        delay(10);
      }
      disableButtonPressTime = 0;
    }
  } else {
    disableButtonPressTime = 0;
  }

  delay(10);
}

